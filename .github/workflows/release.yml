name: Build and Release Andromeda

on:
  workflow_dispatch:
  push:
    branches: [main]

permissions:
  contents: write

jobs:
  build:
    name: Build ${{ matrix.asset-name }}
    runs-on: ${{ matrix.os }}
    continue-on-error: true  # Don't fail the entire workflow if one target fails
    strategy:
      fail-fast: false  # Continue with other builds even if one fails
      matrix:
        include:
          # Linux (x86_64)
          - os: ubuntu-24.04
            rust-target: x86_64-unknown-linux-gnu
            asset-name: andromeda-linux-amd64
            installer-name: andromeda-installer-linux-amd64

          # Linux (ARM64) - cross-compilation
          - os: ubuntu-24.04
            rust-target: aarch64-unknown-linux-gnu
            asset-name: andromeda-linux-arm64
            installer-name: andromeda-installer-linux-arm64
            cross-compile: true

          # macOS (Intel)
          - os: macos-13
            rust-target: x86_64-apple-darwin
            asset-name: andromeda-macos-amd64
            installer-name: andromeda-installer-macos-amd64

          # macOS (Apple Silicon/ARM)
          - os: macos-14
            rust-target: aarch64-apple-darwin
            asset-name: andromeda-macos-arm64
            installer-name: andromeda-installer-macos-arm64

          # Windows (x86_64)
          - os: windows-latest
            rust-target: x86_64-pc-windows-msvc
            asset-name: andromeda-windows-amd64.exe
            installer-name: andromeda-installer-windows-amd64.exe

          # Windows (ARM64)
          - os: windows-latest
            rust-target: aarch64-pc-windows-msvc
            asset-name: andromeda-windows-arm64.exe
            installer-name: andromeda-installer-windows-arm64.exe

    steps:
      - uses: actions/checkout@v4

      - name: Install the rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: "nightly-2025-09-05"
          targets: ${{ matrix.rust-target }}

      - name: Install cross-compilation dependencies
        if: matrix.cross-compile
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu libc6-dev-arm64-cross pkg-config

      - name: Build
        continue-on-error: true  # Allow individual builds to fail
        run: cargo build --release --target ${{ matrix.rust-target }} --manifest-path ./cli/Cargo.toml
        env:
          # Cross-compilation environment variables
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
          CC_aarch64_unknown_linux_gnu: aarch64-linux-gnu-gcc
          # PKG_CONFIG settings for cross-compilation
          PKG_CONFIG_ALLOW_CROSS: 1

      - name: Build installer
        continue-on-error: true  # Allow individual builds to fail
        run: cargo build --bin andromeda-installer --release --target ${{ matrix.rust-target }} --manifest-path ./cli/Cargo.toml
        env:
          # Cross-compilation environment variables
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
          CC_aarch64_unknown_linux_gnu: aarch64-linux-gnu-gcc
          # PKG_CONFIG settings for cross-compilation
          PKG_CONFIG_ALLOW_CROSS: 1

      - name: Prepare binary
        shell: bash
        run: |
          cd target/${{ matrix.rust-target }}/release/
          # Prepare main binary
          if [ -f "andromeda.exe" ]; then
            mv andromeda.exe ${{ matrix.asset-name }}
          elif [ -f "andromeda" ]; then
            mv andromeda ${{ matrix.asset-name }}
          else
            echo "Main binary not found, build may have failed"
            exit 1
          fi
          
          # Prepare installer binary
          if [ -f "andromeda-installer.exe" ]; then
            mv andromeda-installer.exe ${{ matrix.installer-name }}
          elif [ -f "andromeda-installer" ]; then
            mv andromeda-installer ${{ matrix.installer-name }}
          else
            echo "Installer binary not found, build may have failed"
            exit 1
          fi

      - name: Upload Binary as Artifact
        uses: actions/upload-artifact@v4
        if: success()  # Only upload if binary was prepared successfully
        with:
          name: ${{ matrix.asset-name }}
          path: target/${{ matrix.rust-target }}/release/${{ matrix.asset-name }}

      - name: Upload Installer as Artifact
        uses: actions/upload-artifact@v4
        if: success()  # Only upload if installer was prepared successfully
        with:
          name: ${{ matrix.installer-name }}
          path: target/${{ matrix.rust-target }}/release/${{ matrix.installer-name }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create Draft Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./artifacts/*/andromeda-*
          file_glob: true
          draft: true
          tag: latest
          overwrite: true
